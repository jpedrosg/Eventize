//
//  EventInteractor.swift
//  Eventize
//
//  Created by JP Giarrante on 09/09/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EventBusinessLogic {
    func fetchEvent()
    func fetchDetails()
}

protocol EventDataStore {
    var event: Event.EventObject? { get set }
}

final class EventInteractor: EventBusinessLogic, EventDataStore {
    var presenter: EventPresentationLogic?
    var worker: EventWorker?
    var event: Event.EventObject?
    
    init(presenter: EventPresentationLogic? = nil,
         worker: EventWorker = EventWorker(),
         event: Event.EventObject? = nil) {
        self.presenter = presenter
        self.worker = worker
        self.event = event
    }

    func fetchEvent() {
        guard let event else {
            // TODO: Error Handling!
            return
        }
        
        let response = Event.EventDetails.Response(event: event, eventDetails: nil)
        presenter?.presentEvent(response: response)
    }
    
    func fetchDetails() {
        worker?.fetchDetails(completion: { [weak self] result in
            guard let self else { return }
            
            switch result {
            case .success(let details):
                guard let event else {
                    // TODO: Error Handling!
                    return
                }
                
                self.presenter?.presentEvent(response: .init(event: event, eventDetails: details))
            case .failure(_):
                // TODO: Error Handling!
                break
            }
        })
    }
}
