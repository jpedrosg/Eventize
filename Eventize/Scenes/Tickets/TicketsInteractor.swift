//
//  TicketsInteractor.swift
//  Eventize
//
//  Created by JP Giarrante on 09/09/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TicketsBusinessLogic {
    func fetchTickets(request: Tickets.TicketList.Request)
}

protocol TicketsDataStore {
    var tickets: [Tickets.TicketObject] { get set }
}

final class TicketsInteractor: TicketsBusinessLogic, TicketsDataStore {
    var presenter: TicketsPresentationLogic?
    var worker: TicketsWorker
    var tickets: [Tickets.TicketObject]
    
    init(presenter: TicketsPresentationLogic? = nil,
         worker: TicketsWorker = TicketsWorker(),
         tickets: [Tickets.TicketObject] = []) {
        self.presenter = presenter
        self.worker = worker
        self.tickets = tickets
    }

    func fetchTickets(request: Tickets.TicketList.Request) {
        worker.fetchTickets(request: request) { result in
            switch result {
            case .success(let tickets):
                self.tickets = tickets
                self.presenter?.presentTickets(response: .init(tickets: tickets))
            case .failure(_):
                // TODO: Handle Error
                break
            }
        }
    }
}

// MARK: - TicketsViewCellInteractions

extension TicketsInteractor: TicketsViewCellInteractions {
    func validateTicket(_ ticket: Tickets.TicketObject) {
        
        worker.validateTicket(request: ticket) { result in
            switch result {
            case .success(let resultTicket):
                let newTickets = self.tickets.map { ticket in
                    if ticket.eventUuid == resultTicket.eventUuid {
                        return resultTicket
                    } else {
                        return ticket
                    }
                }
                
                self.tickets = newTickets
                self.presenter?.presentTickets(response: .init(tickets: newTickets))
            case .failure(_):
                // TODO: Handle Error
                break
            }
        }
        presenter?.presentTickets(response: .init(tickets: tickets))
    }
}
